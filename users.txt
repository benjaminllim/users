#!/bin/bash
#su root
#cd /home/benjaminllim
#cat /etc/shadow
#cat /etc/passwd
#cat /etc/group

copyfilecontents(){
clear
loop=1

while [ $loop -eq 1 ]
do
	echo "================================================================================"
	echo -e "\e[1;32mCOPY CONTENTS TO NEW FILE\e[0m"
	echo "================================================================================"
	read -p "Press C to copy contents over to new file 
" input


	if [[ $input =~ ^[c|C]$ ]]  
	then
		loop=0
		echo ""
		echo ""
		echo ""
		touch test.tar
		cp test.tar file2.tar
				
		echo -e "\e[1;32mContents of file have been copied\e[0m"
				
	else
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31mInvalid input, please try again\e[0m"
		sleep 5
		clear
		
	fi

done



}

usergroup() {
clear
loop=1

while [ $loop -eq 1 ]
do
	echo "================================================================================"
	echo -e "\e[1;32mSET NEW PRIMARY GROUP\e[0m"
	echo "================================================================================"
	echo "This is the list of existing groups"
	echo `compgen -g`
	sleep 7
	clear
	read -p "New primary group for user
" group
	groupexists=$(grep -c "^$group:" /etc/group) >/dev/null
	if [ $groupexists -eq 0 ]; then
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31m$group does not exist, please please enter an existing group to edit\e[0m"
		sleep 5
		clear
				
	else
		usermod -a -G $group $username
		echo ""
		echo ""
		echo ""
		echo -e "\e[1;32m$username is now in group $group\e[0m"
		loop=0
	fi

done

}

password() {
clear
loop=1

while [ $loop -eq 1 ]
do
	echo "================================================================================"
	echo -e "\e[1;32mCHANGE $username's password\e[0m"
	echo "================================================================================"
	echo "Enter the new password:"
	read -s password1
	echo "Repeat the new password:"
	read -s password2

	#Check both passwords match
	if [[ $password1 != $password2 ]]
	then
		echo ""
		echo ""
		echo ""    
		
		echo "Passwords do not match"
		loop=1 
	fi


		#Change password using chpasswd
		echo "$username:$password1" | chpasswd 
		echo -e "\e[1;32mPassword has been changed\e[0m"
		loop=0
done
}

directory() {
clear
loop=1

while [ $loop -eq 1 ]
do
	echo "================================================================================"
	echo -e "\e[1;32mCHANGE $username's HOME DIRECTORY LOCATION\e[0m"
	echo "================================================================================"
	dir=$( getent passwd "$username" | cut -d: -f6 )
	echo "The current home directory: $dir"
	echo ""
	echo "Directory format is: /---/---" 	
	read -p "Enter new directory location:
" dirinput
	if [[ $dirinput =~ ^[0-9]|[A-Z]|[a-z]*$  ]]
	then
		usermod -d $dirinput -m $username
		loop=0
		echo ""
		echo ""
		echo ""
		echo -e "\e[1;32mHome directory has been changed\e[0m"
	else
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31mInvalid directory input\e[0m"
		sleep 5
		loop=1
		clear
	fi

done


}

lockuser() {
clear
loop=1

while [ $loop -eq 1 ]
do
	echo "================================================================================"
	echo -e "\e[1;32mLOCK USER ACCOUNT $username\e[0m"
	echo "================================================================================"
	read -p "Press L to lock account or U to unlock account: " input

	if [[ $input =~ ^[l|L]$ ]]
	then
		if [ "$(grep "$username" /etc/shadow | cut -d ' ' -f 2)" = "!" ]
		then
			lock=true
			echo -e "\033[32;5mAccount has already been locked\033[0m"
			break
		else
			loop=0
			echo ""
			echo ""
			echo ""
			usermod -L $username
			lock=true			
			echo -e "\e[1;32mAccount is now locked\e[0m"
		fi
		
		
				
	elif [[ $input =~ ^[u|U]$ ]]
	then
		if [ "$(grep "$username" /etc/shadow | cut -d ' ' -f 2)" = "p" ]
		then
			lock=false			
			echo -e "\033[32;5mAccount is already unlocked\033[0m"
			break
		else
			loop=0
			echo ""
			echo ""
			echo ""
			usermod -U $username
			lock=false			
			echo -e "\e[1;32mAccount is now unlocked\e[0m"
		fi
		
	else
		loop=1
		echo -e "\e[0;31mInvalid input, please try again\e[0m"
		sleep 5
		clear
	fi

done



}

userexpiry() {
clear
loop=1

while [ $loop -eq 1 ]
do
	echo "================================================================================"
	echo -e "\e[1;32mCHANGE EXPIRY DATE FOR $username\e[0m"
	echo "================================================================================"
	read -p "Expiry date: " expire
	echo "Date format is YYYY-MM-DD"
	if [[ $expire == [0-9][0-9][0-9][0-9]-[0-3][0-9]-[0-1][0-9] ]]; then
		loop=0
		echo ""
		echo ""
		echo ""
		chage -e $expire $username			
		echo -e "\e[1;32mDate has been changed to $expire\e[0m"
		
		
		
				
	else
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31mInvalid date input, please try again\e[0m"
		sleep 5
		clear
	fi

done
}

editusername() {
clear
loop=1

while [ $loop -eq 1 ]
do
	echo "================================================================================"
	echo -e "\e[1;32mEDIT USERNAME $username\e[0m"
	echo "================================================================================"
	read -p "New username: " newusername

	if grep "${newusername}" /etc/passwd >/dev/null 2>&1; then
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31mUsername is already used, please pick another username\e[0m"
		sleep 5
		clear
				
	else
		loop=0
		echo ""
		echo ""
		echo ""
		sudo usermod -l $newusername $username
				
		echo -e "\e[1;32mUsername has been edited from $username to $newusername\e[0m"
		
	fi

done

}

editusermenu() {
menuloop=1

while [ $menuloop -eq 1 ]
do
	clear

	echo 	"================================================================================"
	echo -e "\e[1;32mWELCOME TO THE EDIT USER MENU \e[0m"
	echo 	"================================================================================"
	echo "What would you like to edit for user account $username?
	"
	echo "-Enter 1 to edit username"  
	echo "-Enter 2 to edit password"
	echo "-Enter 3 to lock/unlock"  
	echo "-Enter 4 to move home directory to new location"
	echo "-Enter 5 to change expiry date"
	echo "-Enter 6 to move user to a new group"
	read -p "-Enter 7 to exit 
" option

	echo 	"================================================================================"

	case "$option" in

		1|-1|one|ONE)
			editusername "$username"
			menuloop=0
			;;
		2|-2|two|TWO)
			password "$username"
			menuloop=0
			;;
		3|-3|three|THREE)
			lockuser "$username"
			menuloop=0
			;;
		4|-4|-4|four|FOUR)
			directory "$username"
			menuloop=0
			;;
		5|-5|five|FIVE)
			userexpiry "$username"
			menuloop=0
			;;
		6|-6|six|SIX)
			usergroup "$username"
			menuloop=0
			;;
		7|-7|seven|SEVEN)
			clear
			echo -e "\e[0;31mExiting terminal... \e[0m"
			exit
			;;

		*)
			clear
			echo -e "\e[0;31mInvalid input, please try again. \e[0m"
			#This will wait x seconds before returning the command 				prompt 
			sleep 3
			menuloop=1
			;;
	esac

done
	

}

editusers() {
loop=1

clear
while [ $loop -eq 1 ]		
do
	echo "================================================================================"
	echo -e "\e[1;32mENTER USERNAME TO EDIT\e[0m"
	echo "================================================================================"


	read -p "Enter username to edit: " username
	#Makes the output of the user go into a black hole
	#Checks if the user exists in the file
	userexists=$(grep -c "^$username:" /etc/passwd) >/dev/null
	
	if [ $userexists -eq 0 ]; then
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31mUser $username does not exist, please choose another name\e[0m"
		sleep 5
		clear
				
	else
		echo ""
		echo ""
		echo ""
		editusermenu "$username"
		loop=0
	fi
		
	
done
}

editgroupname() {
clear
loop=1

while [ $loop -eq 1 ]
do
	echo "================================================================================"
	echo -e "\e[1;32mEDIT GROUP NAME $group\e[0m"
	echo "================================================================================"
	read -p "New group name: " editgroup

	if grep "${editgroup}" /etc/group >/dev/null 2>&1; then
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31mGroup name $editgroup is already used, please pick another username\e[0m"
		sleep 5
		clear
				
	else
		loop=0
		echo ""
		echo ""
		echo ""
		sudo groupmod -n $editgroup $group
		echo -e "\e[1;32mGroup name has been edited from $group to $editgroup\e[0m"
		
	fi

done

}

editgroupmenu() {
menuloop=1

while [ $menuloop -eq 1 ]
do
	clear

	echo 	"================================================================================"
	echo -e "\e[1;32mWELCOME TO THE EDIT GROUP MENU \e[0m"
	echo 	"================================================================================"
	echo "What would you like to edit to group $group?
	"
	echo "-Enter 1 to edit group name"  
	echo "-Enter 2 to add users" 
	read -p "-Enter 3 to exit 
" option

	echo 	"================================================================================"

	case "$option" in

		1|-1|one|ONE)
			editgroupname "$group"
			menuloop=0
			;;
		2|-2|two|TWO)
			usermenu
			menuloop=0
			;;
		3|-3|three|THREE)
			clear
			echo -e "\e[0;31mExiting terminal... \e[0m"
			exit
			;;

		*)
			clear
			echo -e "\e[0;31mInvalid input, please try again. \e[0m"
			#This will wait x seconds before returning the command prompt 
			sleep 3
			menuloop=1
			;;
	esac

done
	


}

editgroups() {
loop=1

clear
while [ $loop -eq 1 ]		
do
echo "================================================================================"
echo -e "\e[1;32mENTER GROUP NAME TO EDIT\e[0m"
echo "================================================================================"


	read -p "Enter Group name to edit: " group
	#Makes the output of the group go into a black hole
	groupexists=$(grep -c "^$group:" /etc/group) >/dev/null
	if [ $groupexists -eq 0 ]; then
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31m$group does not exist, please please enter an existing group to edit\e[0m"
		sleep 5
		clear
				
	else
		editgroupmenu "$group"
		loop=0
	fi
		
	
done
}

deletegroups() {
loop=1

clear
while [ $loop -eq 1 ]		
do
echo "================================================================================"
echo -e "\e[1;32mDELETE GROUP\e[0m"
echo "================================================================================"


	read -p "Type group name to delete: " deletegroup
	#Makes the output of the group go into a black hole
	#Checks if the group entered exists first
	groupexists=$(grep -c "^$deletegroup:" /etc/group) >/dev/null
	
	if [ $groupexists -eq 0 ]; then
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31m$deletegroup does not exist, please enter an existing group\e[0m"
		sleep 5
		clear
				
	else
		sudo groupdel $deletegroup
		echo ""
		echo ""
		echo ""
		echo -e "\e[1;32m$deletegroup has been deleted\e[0m"
		loop=0
	fi
		
	
done
}

addgroup() {
loop=1

clear
while [ $loop -eq 1 ]		
do
echo "================================================================================"
echo -e "\e[1;32mADD GROUP\e[0m"
echo "================================================================================"


	read -p "New Group name: " group
	#Makes the output of the group go into a black hole
	grep -e "^$group" /etc/group >/dev/null
	#Checks if the group exists in the file	
	if grep "${group}" /etc/group >/dev/null 2>&1; then
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31m$group already exists, please choose another name\e[0m"
		sleep 5
		clear
				
	else
		loop=0s
		echo ""
		echo ""
		echo ""
		#Adds the group using groupadd command		
		groupadd $group
		echo -e "\e[1;32mGroup $group has been added\e[0m" 		
		
		
	fi
		
	
done

}

addusers() {
loop=1

clear
while [ $loop -eq 1 ]		
do
echo "================================================================================"
echo -e "\e[1;32mADD USERS\e[0m"
echo "================================================================================"
	
	
	
		read -p "New Username: " username
		read -s -p "New Password: " password
		#Makes the output of the username go into a black hole
		#grep -e "^$username" /etc/passwd >/dev/null
		#Checks if the user exists in the file 
			if grep "${username}" /etc/passwd >/dev/null 2>&1; then
				loop=1
				echo ""
				echo ""
				echo ""
				echo -e "\e[0;31m$username already exists, please choose another name\e[0m"
				sleep 5
				clear
				
			else
				loop=0
				echo ""
				echo ""
				echo ""
				#Password is stored in variable called pass and is 					encrypted 
				#Encrypted passwords are stored in etc/shadow
				pass=$(perl -e 'print crypt($ARGV[0], "password")' 					$password)
				#Basic user information stored in etc/passwd
				#Adds user
				useradd -m -p $pass $username
#				
				echo -e "\e[1;32mUser $username has successfully added\e[0m"
	
				
			fi
	
done

}

deleteusers() {
loop=1

clear
while [ $loop -eq 1 ]		
do
echo "================================================================================"
echo -e "\e[1;32mDELETE USERS\e[0m"
echo "================================================================================"
	
	read -p "Type username to delete: " deleteuser
	#Checks if the user entered exists first
	userexists=$(grep -c "^$deleteuser:" /etc/passwd) >/dev/null
	
	if [ $userexists -eq 0 ]; then
		loop=1
		echo ""
		echo ""
		echo ""
		echo -e "\e[0;31m$deleteuser does not exist, please choose an existing user\e[0m"
		sleep 5
		clear
				
	else
		sudo userdel -r $deleteuser
		echo ""
		echo ""
		echo ""
		echo -e "\e[1;32m$deleteuser has been deleted\e[0m"
		loop=0
	fi
		
	
done
	
		    
		    
	
}


archivemenu() {
menuloop=1
while [ $menuloop -eq 1 ]
do
	clear

	echo 	"================================================================================"
	echo -e "\e[1;32mWELCOME TO THE ARCHIVE MENU \e[0m"
	echo 	"================================================================================"
	echo "How would you like to archive file?"

	echo "-Enter 1 to archive file by day"  
	echo "-Enter 2 to archive file by day" 
	echo "-Enter 3 to choose frequency of archive"  
	echo "-Enter 4 to choose source and destination" 
	echo "-Enter 5 to copy contents to new file" 
	read -p "-Enter 6 to exit
" option

	echo 	"================================================================================"

case "$option" in
1|-1|one|ONE)
	calculate_bonus
	menuloop=0
	;;
2|-2|two|TWO)
	savedata "${qsales[@]}" "${salesperson[@]}" "$nosalesperson" "${bonus[@]}"
	menuloop=0
	;;

3|-3|three|THREE)	
	showsavedata "${qsales[@]}" "${salesperson[@]}" "$nosalesperson" 
	"${bonus[@]}" 
	menuloop=0

	;;
4|-4|-4|four|FOUR)
	sortsalespersons "${qsales[@]}" "${salesperson[@]}" "$nosalesperson" 
	"${bonus[@]}" 
	menuloop=0
	;;
5|-5|five|FIVE)
	copyfilecontents
	menuloop=0
	;;
6|-6|six|SIX)
	clear
	echo -e "\e[0;31mExiting terminal... \e[0m"
	exit
	;;

*)
	clear
	echo -e "\e[0;31mInvalid input, please try again. \e[0m"
	#This will wait x seconds before returning the command prompt 
	sleep 3
	menuloop=1
	;;
esac

done

}



usermenu() {
menuloop=1
while [ $menuloop -eq 1 ]
do
	clear

	echo 	"================================================================================"
	echo -e "\e[1;32mWELCOME TO THE USER MENU \e[0m"
	echo 	"================================================================================"
	echo "Please select an option:
"
	echo "-Enter 1 to add a new group"  
	echo "-Enter 2 to add new users" 
	echo "-Enter 3 to delete users"  
	echo "-Enter 4 to delete groups" 
	echo "-Enter 5 to edit users" 
	echo "-Enter 6 to edit groups"
	read -p "-Enter 7 to exit
" option

	echo 	"================================================================================"

case "$option" in
1|-1|one|ONE)
	addgroup
	menuloop=0
	;;
2|-2|two|TWO)
	addusers
	menuloop=0
	;;

3|-3|three|THREE)	
	deleteusers
	menuloop=0

	;;
4|-4|-4|four|FOUR)
	deletegroups
	menuloop=0
	;;
5|-5|five|FIVE)
	editusers
	menuloop=0
	;;
6|-6|six|SIX)
	editgroups
	menuloop=0
	;;
7|-7|seven|SEVEN)
	clear
	echo -e "\e[0;31mExiting terminal... \e[0m"
	exit
	;;

*)
	clear
	echo -e "\e[0;31mInvalid input, please try again. \e[0m"
	#This will wait x seconds before returning the command prompt 
	sleep 3
	menuloop=1
	;;
esac

done

}


menu() {
menuloop=1
if [ $(id -u) -eq 0 ]; then
	while [ $menuloop -eq 1 ]
	do
		clear

		echo 	"================================================================================"
		echo -e "\e[1;32mWELCOME TO THE MENU \e[0m"
		echo 	"================================================================================"
		echo "Please select an option:
	"
		echo "-Enter 1 to archive program"  
		echo "-Enter 2 to manage users" 
		read -p "-Enter 3 to exit 
" option

		echo 	"================================================================================"

		case "$option" in

		1|-1|one|ONE)
			archivemenu
			menuloop=0
			;;
		2|-2|two|TWO)
			usermenu
			menuloop=0
			;;
		3|-3|three|THREE)
			clear
			echo -e "\e[0;31mExiting terminal... \e[0m"
			exit
			;;

		*)
			clear
			echo -e "\e[0;31mInvalid input, please try again. \e[0m"
			#This will wait x seconds before returning the command prompt 
			sleep 3
			menuloop=1
			;;
		esac

	done
	
else
echo -e "\e[5mOnly a root user can have superuser access\033[0m"
exit 

fi

}






#Call the menu last as functions must exist first before calling
menu
